#!/bin/bash
 
set -e

# ------------------------------------------------------------------------------
# usage
# ------------------------------------------------------------------------------
usage() {

    cat <<USAGE
    
    Usage: $0 [options]

    Options:
        -c, -cmd <cmd>              
            command to execute (required)

        -o, --out_path <out_path>
            output path (required)
                can be specified multiple times

        --overwrite <0|1>
            flag to overwrite output (default: 0/false)

        -p, --print <0|1>
            flag to print command (default: 0/false)
                only print, but not run the command for debugging purposes

        -h, --help
            show this help message and exit
        
USAGE
}

# ------------------------------------------------------------------------------
# parse usage
# ------------------------------------------------------------------------------
if [ $# -eq 0 ]; then
    usage
    exit 1
fi

# default values
overwrite=0
print=0
# Parse command line arguments
declare -a out_paths
i=0
while [[ $# -gt 0 ]]; do
    case "$1" in
        -c|-cmd)
            cmd=$2
            shift 2
            ;;
        -o|--out_path) 
            out_paths[$i]=$2
            i=$((i+1))
            shift 2
            ;;
        -p|--print)
            print=$2
            shift 2
            ;;
        --overwrite)
            overwrite=$2
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            usage
            bash error_msg "unrecognized option: $1"
            exit 1
            ;;
    esac
done

# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
echo -e "\ncommand:\n${cmd}\n"
if [[ ${print} -eq 1 ]]; then
    warning_msg "printing, but not running command"
    exit 0
fi

declare -A out_paths_exists
for i in ${!out_paths[@]}; do
    if [[ -e ${out_paths[$i]} ]] && [[ -s ${out_paths[$i]} ]]; then
        out_paths_exists[$i]=${out_paths[$i]}
    elif [[ -e ${out_paths[$i]} ]] && [[ ! -s ${out_paths[$i]} ]]; then
        bash warning_msg "deleting, file already exists and overwrite set to 0, but file is empty"
        rm -r ${out_paths[$i]}
    fi
done

if [[ ${#out_paths_exists[@]} -gt 0 ]] && [[ ${overwrite} -eq 0 ]]; then
    bash warning_msg "skipping, files already exists and overwrite set to 0"
    echo -e "\noutput files:"
    for i in ${!out_paths_exists[@]}; do
        echo -e "\t${i}:\t${out_paths_exists[$i]}"
    done
elif [[ ${#out_paths_exists[@]} -gt 0 ]] && [[ ${overwrite} -eq 1 ]]; then
    bash warning_msg "overwriting, file already exists and overwrite set to 1"
    echo -e "\noutput files:"
    for i in ${!out_paths_exists[@]}; do
        echo -e "\t${i}:\t${out_paths_exists[$i]}"
        rm -r ${out_paths_exists[$i]}
    done
    eval ${cmd}
elif [[ ${#out_paths_exists[@]} -eq 0 ]]; then
    eval ${cmd}
fi

ensure_permissions ${out_paths[@]}

for i in ${!out_paths[@]}; do
    if [[ ! -e ${out_paths[$i]} ]]; then
        bash error_msg "output file not generated (${out_paths[$i]})"
    fi
done
