#!/bin/bash

# ------------------------------------------------------------------------------
# usage
# ------------------------------------------------------------------------------
usage() {
    cat <<USAGE
    
    Usage: $0 [options]

    Options:
        
        --in_scripts <path>     (required)
            path to text file of scripts to wrap
                inside the text file has a new line for each script to run
        
        --in_ids <path>         (required)
            path to csv with subject and session list
                columns: sub, ses, (airc_id)

        --scripts_idx           (required)
            script to process:
                <int1>,<int2>,...       multiple inputs separated by commas (e.g., -s 1,2,3)
                <int_start>:<int_end>   range of scripts to process (e.g., -s 1:3)
                'all'                   process all scripts

        --ids_idx               (required)
            idx of ids to process:
                <int1>,<int2>,...       multiple inputs separated by commas (e.g., -s 1,2,3)
                <int_start>:<int_end>   range of scripts to process (e.g., -s 1:3)
                'all'                   process all scripts

        --sge <0|1>             (optional)
            whether to run on SGE (1) or not (0) (default: 0)

        --sge_job_limit <int>   (optional)
            maximum number of jobs to running on SGE (default: 0, i.e. no limit)

        --sge_server <0|1|2>    (optional)
            which SGE server to use (default: 0)
                0. both
                1. ponyo
                2. totoro

        --sge_wd <path>         (optional)
            path to working directory for SGE

        --print <0|1>           (optional)
            print commands to screen only (default: 0)

        --overwrite <0|1>       (optional)
            flag to overwrite existing output files (default: 0)

        -h, --help
            show this help message and exit

USAGE
}

usage_scripts_idx() {
    usage_scripts_idx="\n\tscripts:\n"
    in_scripts=(`cat ${in_scripts}`)
    for i in ${!in_scripts[@]}; do
        c=`echo ${i} + 1 | bc`
        usage_scripts_idx="${usage_scripts_idx}\t\t${c}:\t${in_scripts[$i]}\n"
    done
    echo -e ${usage_scripts_idx}
}

usage_ids_idx() {
    usage_ids_idx="\n\tids_idx:\n"
    ids=(`cat ${in_ids}`)
    # remove header
    in_ids=("${ids[@]:1}")
    for i in ${!in_ids[@]}; do
        c=`echo ${i} + 1 | bc`
        usage_ids_idx="${usage_ids_idx}\t\t${c}:\t${in_ids[$i]}\n"
    done
    echo -e ${usage_ids_idx}
}

# ------------------------------------------------------------------------------
# default args
# ------------------------------------------------------------------------------
# ids_idx=1
sge=0
print=0
sge_server=0
sge_job_limit=0
test=0
overwrite=0

# ------------------------------------------------------------------------------
# parse args
# ------------------------------------------------------------------------------
# if no arguments supplied, show usage
if [ $# -eq 0 ]; then
    usage
    exit 1
fi

# parse command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --in_scripts)
            in_scripts=$2
            shift 2
            ;;
        --in_ids)
            in_ids=$2
            shift 2
            ;;
        --scripts_idx)
            scripts_idx=$2
            shift 2
            ;;
        --ids_idx)
            ids_idx=$2
            shift 2
            ;;
        --sge)
            sge=$2
            if [[ ${sge} -eq 0 ]] || [[ ${sge} -eq 1 ]]; then
                shift 2
            else
                echo "error: --sge must be 0 or 1"
                exit 1
            fi
            ;;
        --sge_job_limit)
            sge_job_limit=$2
            shift 2
            ;;
        --sge_server)
            sge_server=$2
            shift 2
            ;;
        --sge_wd)
            sge_wd=$2
            shift 2
            ;;
        --print)
            print=$2
            shift 2
            ;;
        --overwrite)
            overwrite=$2
            shift 2
            ;;
        -h|--help)
            usage
            exit 1
            ;;
        *)
            echo "Unknown argument: $1"
            usage
            exit 1
            ;;
    esac
done

# ------------------------------------------------------------------------------
# check args
# ------------------------------------------------------------------------------
if [[ -z ${in_scripts} ]]; then
    echo -e "\nerror: must specify --in_scripts"
    usage
    exit 1
fi

if [[ -z ${in_ids} ]]; then
    echo -e "\nerror: must specify --in_ids"
    usage
    exit 1
fi

if [[ -z ${scripts_idx} ]]; then
    usage
    usage_scripts_idx
    echo -e "\nerror: must specify --scripts_idx\n"
    exit 1
fi

if [[ -z ${ids_idx} ]]; then
    usage
    usage_ids_idx
    echo -e "\nerror: must specify --ids_idx\n"
    exit 1
fi

# ------------------------------------------------------------------------------
# read in_scripts
# ------------------------------------------------------------------------------
in_scripts=(`cat ${in_scripts}`)
if [[ ${#in_scripts[@]} -eq 0 ]]; then
    echo "error: no scripts found in ${in_scripts}"
    exit 1
fi

if [[ ${scripts_idx} == "all" ]]; then
    scripts_idx=(`seq 1 $((${#in_scripts[@]} - 1))`)
elif [[ ${scripts_idx} == *":"* ]]; then
    scripts_idx_start=`echo ${scripts_idx} | awk -F: '{print $1}'`
    scripts_idx_end=`echo ${scripts_idx} | awk -F: '{print $2}'`
    scripts_idx=(`seq ${scripts_idx_start} ${scripts_idx_end}`)
elif [[ ${scripts_idx} == *","* ]]; then
    scripts_idx=(`echo ${scripts_idx} | sed 's/,/ /g'`)
else
    scripts_idx=(`echo ${scripts_idx}`)
fi



# adjust scripts_idx to 0-based
for i in ${!scripts_idx[@]}; do
    scripts_idx[$i]=`echo ${scripts_idx[$i]} - 1 | bc`
done

# subset
declare -a scripts
for i in ${!scripts_idx[@]}; do
    scripts[$i]=${in_scripts[${scripts_idx[$i]}]}
done

echo -e "\nscripts:"
for i in ${!scripts[@]}; do
    c=`echo ${i} + 1 | bc`
    echo -e "\t${c}:\t${scripts[$i]}"
done

# ------------------------------------------------------------------------------
# read ids
# ------------------------------------------------------------------------------
in_ids=(`cat ${in_ids}`)

if [[ ${#in_ids[@]} -eq 0 ]]; then
    echo "error: no ids found in ${in_ids}"
    exit 1
fi

if [[ ${ids_idx} == "all" ]]; then
    ids_idx=(`seq 1 $((${#in_ids[@]} - 1))`)
elif [[ ${ids_idx} == *":"* ]]; then
    ids_idx_start=`echo ${ids_idx} | awk -F: '{print $1}'`
    ids_idx_end=`echo ${ids_idx} | awk -F: '{print $2}'`
    ids_idx=(`seq ${ids_idx_start} ${ids_idx_end}`)
elif [[ ${ids_idx} == *","* ]]; then
    ids_idx=(`echo ${ids_idx} | sed 's/,/ /g'`)
else
    ids_idx=(`echo ${ids_idx}`)
fi

# echo -e "\nids_idx: ${ids_idx[@]}"

# subset
declare -a ids
for i in ${!ids_idx[@]}; do
    ids[$i]=${in_ids[${ids_idx[$i]}]}
done

echo -e "\nids:"
for i in ${!ids[@]}; do
    c=`echo ${i} + 1 | bc`
    echo -e "\t${c}:\t${ids[$i]}"
done

# exit 1

# ------------------------------------------------------------------------------
# non-sge option
# ------------------------------------------------------------------------------

if [[ ${sge} -eq 0 ]]; then
    echo -e "\nscript_idx,id_idx,airc_id,sub,ses"
    for s in ${!scripts[@]}; do
        for i in ${!ids[@]}; do
            id=${ids[$i]}
            s1=`echo ${s} + 1 | bc`
            i1=`echo ${i} + 1 | bc`
            echo -e "\n${s1},${i1},${ids[$i]}"
            airc_id=`echo ${id} | awk -F, '{print $1}'`
            sub=`echo ${id} | awk -F, '{print $2}'`
            ses=`echo ${id} | awk -F, '{print $3}'`
            opts="--airc_id ${airc_id} --sub ${sub} --ses ${ses} --overwrite ${overwrite}"
            cmd="bash ${in_scripts[${s}]} ${opts}"
            echo -e "command:\n${cmd}"
            if [[ ${print} -eq 0 ]]; then
                eval ${cmd}
            fi
        done
    done
fi

# ------------------------------------------------------------------------------
# sge option
# ------------------------------------------------------------------------------
if [[ ${sge} -eq 1 ]]; then
    echo -e "\nscript_idx,id_idx,airc_id,sub,ses"
    module load sge
    declare -a job_id_list
    c=0
    for s in ${!scripts[@]}; do
        for i in ${!ids[@]}; do
            id=${ids[$i]}
            s1=`echo ${s} + 1 | bc`
            i1=`echo ${i} + 1 | bc`
            echo -e "\n${s1},${i1},${ids[$i]}"
            
            airc_id=`echo ${id} | awk -F, '{print $1}'`
            sub=`echo ${id} | awk -F, '{print $2}'`
            ses=`echo ${id} | awk -F, '{print $3}'`

            opts="--airc_id ${airc_id} --sub ${sub} --ses ${ses} --overwrite ${overwrite}"
            
            script_name=`basename ${in_scripts[${s}]} | sed 's/.sh//'`
            job_name="sub-${sub}_ses-${ses}_script-${script_name}"
            # job_name="${script_name}"

            job_id_list[${c}]=${job_name}
            
            sge_opts="-N ${job_name}"

            # sge server
            if [[ ${sge_server} -eq 1 ]]; then
                sge_opts="${sge_opts} -q all.q@cvlkrcompute1.utdallas.edu"
            elif [[ ${sge_server} -eq 2 ]]; then
                sge_opts="${sge_opts} -q all.q@cvlkrcompute2.utdallas.edu"
            fi

            if [[ ! -z ${sge_wd} ]]; then
                sge_opts="${sge_opts} -wd ${sge_wd}"
            fi

            # sge job limit
            if [[ ${sge_job_limit} -gt 0 ]] && [[ ${c} -ge ${sge_job_limit} ]]; then
                sge_opts="${sge_opts} -hold_jid ${job_id_list[$((c - sge_job_limit))]}"
            fi

            cmd="qsub ${sge_opts} ${in_scripts[$s]} ${opts}"
        
            echo -e "command:\n${cmd}"
            if [[ ${print} -eq 0 ]]; then
                eval ${cmd}
            fi

            c=`echo ${c} + 1 | bc`
        done
    done
fi